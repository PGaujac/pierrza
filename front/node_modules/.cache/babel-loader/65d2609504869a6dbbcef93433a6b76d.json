{"ast":null,"code":"import _objectSpread from \"/Users/pierredegaujac/Desktop/le_bocal/pierrza/pierrza/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/pierredegaujac/Desktop/le_bocal/pierrza/pierrza/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pierredegaujac/Desktop/le_bocal/pierrza/pierrza/src/components/PizzaPerso/PizzaPerso2.js\";\nimport React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { toppings } from '../../data/toppings.json';\nimport './PizzaPerso2.css'; // fake data generator\n// const getItems = (count, offset = 0) =>\n//   Array.from({ length: count }, (v, k) => k).map(k => ({\n//     id: `item-${k + offset}`,\n//     content: `item ${k + offset}`\n//   }));\n// a little function to help us with reordering the result\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n\n  const _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\n * Moves an item from one list to another list.\n */\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n\n  const _sourceClone$splice = sourceClone.splice(droppableSource.index, 1),\n        _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1),\n        removed = _sourceClone$splice2[0];\n\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'grey'\n}, draggableStyle);\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\n\nclass Test extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      items: getItems(10),\n      selected: getItems(5, 10)\n    };\n    this.id2List = {\n      droppable: 'items',\n      droppable2: 'selected'\n    };\n\n    this.getList = id => this.state[this.id2List[id]];\n\n    this.onDragEnd = result => {\n      const source = result.source,\n            destination = result.destination; // dropped outside the list\n\n      if (!destination) {\n        return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n        const items = reorder(this.getList(source.droppableId), source.index, destination.index);\n        let state = {\n          items\n        };\n\n        if (source.droppableId === 'droppable2') {\n          state = {\n            selected: items\n          };\n        }\n\n        this.setState(state);\n      } else {\n        const result = move(this.getList(source.droppableId), this.getList(destination.droppableId), source, destination);\n        this.setState({\n          items: result.droppable,\n          selected: result.droppable2\n        });\n      }\n    };\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"test-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Droppable, {\n      droppableId: \"droppable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", {\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this.state.items.map((item, index) => React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), item.content))), provided.placeholder)), React.createElement(Droppable, {\n      droppableId: \"droppable2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", {\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.state.selected.map((item, index) => React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), item.content))), provided.placeholder))));\n  }\n\n}\n\nexport default Test;","map":{"version":3,"sources":["/Users/pierredegaujac/Desktop/le_bocal/pierrza/pierrza/src/components/PizzaPerso/PizzaPerso2.js"],"names":["React","Component","DragDropContext","Droppable","Draggable","toppings","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","Test","state","items","getItems","selected","id2List","droppable","droppable2","getList","id","onDragEnd","setState","render","provided","snapshot","innerRef","map","item","draggableProps","dragHandleProps","style","content","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { toppings } from '../../data/toppings.json';\n\nimport './PizzaPerso2.css';\n\n// fake data generator\n// const getItems = (count, offset = 0) =>\n//   Array.from({ length: count }, (v, k) => k).map(k => ({\n//     id: `item-${k + offset}`,\n//     content: `item ${k + offset}`\n//   }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'grey',\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\n\nclass Test extends Component {\n  state = {\n    items: getItems(10),\n    selected: getItems(5, 10)\n  };\n\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  id2List = {\n    droppable: 'items',\n    droppable2: 'selected'\n  };\n\n  getList = id => this.state[this.id2List[id]];\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      let state = { items };\n\n      if (source.droppableId === 'droppable2') {\n        state = { selected: items };\n      }\n\n      this.setState(state);\n    } else {\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      this.setState({\n        items: result.droppable,\n        selected: result.droppable2\n      });\n    }\n  };\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className='test-container'>\n          <Droppable droppableId='droppable'>\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.state.items.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {item.content}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n          <Droppable droppableId='droppable2'>\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.state.selected.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {item.content}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}